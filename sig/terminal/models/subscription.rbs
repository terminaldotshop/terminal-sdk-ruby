module Terminal
  module Models
    type subscription_api =
      {
        id: String,
        address_id: String,
        card_id: String,
        frequency: Terminal::Models::SubscriptionAPI::frequency,
        product_variant_id: String,
        quantity: Integer,
        next_: String
      }

    class SubscriptionAPI < Terminal::BaseModel
      attr_accessor id: String

      attr_accessor address_id: String

      attr_accessor card_id: String

      attr_accessor frequency: Terminal::Models::SubscriptionAPI::frequency

      attr_accessor product_variant_id: String

      attr_accessor quantity: Integer

      attr_reader next_: String?

      def next_=: (String) -> void

      def initialize:
        (
          id: String,
          address_id: String,
          card_id: String,
          frequency: Terminal::Models::SubscriptionAPI::frequency,
          product_variant_id: String,
          quantity: Integer,
          next_: String
        ) -> void
        | (
          ?Terminal::Models::subscription_api | Terminal::BaseModel data
        ) -> void

      def to_hash: -> Terminal::Models::subscription_api

      type frequency = :fixed | :daily | :weekly | :monthly | :yearly

      class Frequency < Terminal::Enum
        FIXED: :fixed
        DAILY: :daily
        WEEKLY: :weekly
        MONTHLY: :monthly
        YEARLY: :yearly

        def self.values: -> Array[Terminal::Models::SubscriptionAPI::frequency]
      end
    end
  end
end
