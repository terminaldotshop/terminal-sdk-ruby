module TerminalShop
  module Type
    class ArrayOf[Elem]
      include TerminalShop::Type::Converter

      def self.[]: (
        ::Hash[Symbol, top]
        | ^-> TerminalShop::Type::Converter::input
        | TerminalShop::Type::Converter::input type_info,
        ?::Hash[Symbol, top] spec
      ) -> instance

      def ===: (top other) -> bool

      def ==: (top other) -> bool

      def coerce: (
        Enumerable[Elem] | top value,
        state: TerminalShop::Type::Converter::state
      ) -> (::Array[top] | top)

      def dump: (Enumerable[Elem] | top value) -> (::Array[top] | top)

      def item_type: -> Elem

      def nilable?: -> bool

      def initialize: (
        ::Hash[Symbol, top]
        | ^-> TerminalShop::Type::Converter::input
        | TerminalShop::Type::Converter::input type_info,
        ?::Hash[Symbol, top] spec
      ) -> void
    end
  end
end
