module TerminalShop
  module Models
    type subscription_api =
      {
        id: String,
        address_id: String,
        card_id: String,
        frequency: TerminalShop::Models::SubscriptionAPI::frequency,
        product_variant_id: String,
        quantity: Integer,
        next_: String,
        schedule: TerminalShop::Models::SubscriptionAPI::schedule
      }

    class SubscriptionAPI < TerminalShop::BaseModel
      attr_accessor id: String

      attr_accessor address_id: String

      attr_accessor card_id: String

      attr_accessor frequency: TerminalShop::Models::SubscriptionAPI::frequency

      attr_accessor product_variant_id: String

      attr_accessor quantity: Integer

      attr_reader next_: String?

      def next_=: (String) -> String

      attr_reader schedule: TerminalShop::Models::SubscriptionAPI::schedule?

      def schedule=: (
        TerminalShop::Models::SubscriptionAPI::schedule
      ) -> TerminalShop::Models::SubscriptionAPI::schedule

      def initialize:
        (
          id: String,
          address_id: String,
          card_id: String,
          frequency: TerminalShop::Models::SubscriptionAPI::frequency,
          product_variant_id: String,
          quantity: Integer,
          next_: String,
          schedule: TerminalShop::Models::SubscriptionAPI::schedule
        ) -> void
        | (
          ?TerminalShop::Models::subscription_api | TerminalShop::BaseModel data
        ) -> void

      def to_hash: -> TerminalShop::Models::subscription_api

      type frequency = :fixed | :daily | :weekly | :monthly | :yearly

      class Frequency < TerminalShop::Enum
        FIXED: :fixed
        DAILY: :daily
        WEEKLY: :weekly
        MONTHLY: :monthly
        YEARLY: :yearly

        def self.values: -> ::Array[TerminalShop::Models::SubscriptionAPI::frequency]
      end

      type schedule =
        TerminalShop::Models::SubscriptionAPI::Schedule::Type
        | TerminalShop::Models::SubscriptionAPI::Schedule::UnionMember1

      class Schedule < TerminalShop::Union
        type type_ = { type: :fixed }

        class Type < TerminalShop::BaseModel
          attr_accessor type: :fixed

          def initialize:
            (type: :fixed) -> void
            | (
              ?TerminalShop::Models::SubscriptionAPI::Schedule::type_
              | TerminalShop::BaseModel data
            ) -> void

          def to_hash: -> TerminalShop::Models::SubscriptionAPI::Schedule::type_
        end

        type union_member1 = { interval: Integer, type: :weekly }

        class UnionMember1 < TerminalShop::BaseModel
          attr_accessor interval: Integer

          attr_accessor type: :weekly

          def initialize:
            (interval: Integer, type: :weekly) -> void
            | (
              ?TerminalShop::Models::SubscriptionAPI::Schedule::union_member1
              | TerminalShop::BaseModel data
            ) -> void

          def to_hash: -> TerminalShop::Models::SubscriptionAPI::Schedule::union_member1
        end

        private def self.variants: -> [[nil, TerminalShop::Models::SubscriptionAPI::Schedule::Type], [nil, TerminalShop::Models::SubscriptionAPI::Schedule::UnionMember1]]
      end
    end
  end
end
