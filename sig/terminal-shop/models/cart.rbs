module TerminalShop
  module Models
    type cart_api =
      {
        amount: TerminalShop::Models::CartAPI::Amount,
        items: ::Array[TerminalShop::Models::CartAPI::Item],
        subtotal: Integer,
        address_id: String,
        card_id: String,
        shipping: TerminalShop::Models::CartAPI::Shipping
      }

    class CartAPI < TerminalShop::BaseModel
      attr_accessor amount: TerminalShop::Models::CartAPI::Amount

      attr_accessor items: ::Array[TerminalShop::Models::CartAPI::Item]

      attr_accessor subtotal: Integer

      attr_reader address_id: String?

      def address_id=: (String) -> String

      attr_reader card_id: String?

      def card_id=: (String) -> String

      attr_reader shipping: TerminalShop::Models::CartAPI::Shipping?

      def shipping=: (
        TerminalShop::Models::CartAPI::Shipping
      ) -> TerminalShop::Models::CartAPI::Shipping

      def initialize:
        (
          amount: TerminalShop::Models::CartAPI::Amount,
          items: ::Array[TerminalShop::Models::CartAPI::Item],
          subtotal: Integer,
          ?address_id: String,
          ?card_id: String,
          ?shipping: TerminalShop::Models::CartAPI::Shipping
        ) -> void
        | (
          ?TerminalShop::Models::cart_api | TerminalShop::BaseModel data
        ) -> void

      def to_hash: -> TerminalShop::Models::cart_api

      type amount = { subtotal: Integer, shipping: Integer, total: Integer }

      class Amount < TerminalShop::BaseModel
        attr_accessor subtotal: Integer

        attr_reader shipping: Integer?

        def shipping=: (Integer) -> Integer

        attr_reader total: Integer?

        def total=: (Integer) -> Integer

        def initialize:
          (subtotal: Integer, ?shipping: Integer, ?total: Integer) -> void
          | (
            ?TerminalShop::Models::CartAPI::amount
            | TerminalShop::BaseModel data
          ) -> void

        def to_hash: -> TerminalShop::Models::CartAPI::amount
      end

      type item =
        {
          id: String,
          product_variant_id: String,
          quantity: Integer,
          subtotal: Integer
        }

      class Item < TerminalShop::BaseModel
        attr_accessor id: String

        attr_accessor product_variant_id: String

        attr_accessor quantity: Integer

        attr_accessor subtotal: Integer

        def initialize:
          (
            id: String,
            product_variant_id: String,
            quantity: Integer,
            subtotal: Integer
          ) -> void
          | (
            ?TerminalShop::Models::CartAPI::item | TerminalShop::BaseModel data
          ) -> void

        def to_hash: -> TerminalShop::Models::CartAPI::item
      end

      type shipping = { service: String, timeframe: String }

      class Shipping < TerminalShop::BaseModel
        attr_reader service: String?

        def service=: (String) -> String

        attr_reader timeframe: String?

        def timeframe=: (String) -> String

        def initialize:
          (?service: String, ?timeframe: String) -> void
          | (
            ?TerminalShop::Models::CartAPI::shipping
            | TerminalShop::BaseModel data
          ) -> void

        def to_hash: -> TerminalShop::Models::CartAPI::shipping
      end
    end
  end
end
