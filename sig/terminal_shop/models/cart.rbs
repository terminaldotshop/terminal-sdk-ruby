module TerminalShop
  module Models
    type cart_api =
      {
        amount: TerminalShop::CartAPI::Amount,
        items: ::Array[TerminalShop::CartAPI::Item],
        subtotal: Integer,
        address_id: String,
        card_id: String,
        shipping: TerminalShop::CartAPI::Shipping
      }

    class CartAPI < TerminalShop::Internal::Type::BaseModel
      attr_accessor amount: TerminalShop::CartAPI::Amount

      attr_accessor items: ::Array[TerminalShop::CartAPI::Item]

      attr_accessor subtotal: Integer

      attr_reader address_id: String?

      def address_id=: (String) -> String

      attr_reader card_id: String?

      def card_id=: (String) -> String

      attr_reader shipping: TerminalShop::CartAPI::Shipping?

      def shipping=: (
        TerminalShop::CartAPI::Shipping
      ) -> TerminalShop::CartAPI::Shipping

      def initialize: (
        amount: TerminalShop::CartAPI::Amount,
        items: ::Array[TerminalShop::CartAPI::Item],
        subtotal: Integer,
        ?address_id: String,
        ?card_id: String,
        ?shipping: TerminalShop::CartAPI::Shipping
      ) -> void

      def to_hash: -> {
        amount: TerminalShop::CartAPI::Amount,
        items: ::Array[TerminalShop::CartAPI::Item],
        subtotal: Integer,
        address_id: String,
        card_id: String,
        shipping: TerminalShop::CartAPI::Shipping
      }

      type amount = { subtotal: Integer, shipping: Integer, total: Integer }

      class Amount < TerminalShop::Internal::Type::BaseModel
        attr_accessor subtotal: Integer

        attr_reader shipping: Integer?

        def shipping=: (Integer) -> Integer

        attr_reader total: Integer?

        def total=: (Integer) -> Integer

        def initialize: (
          subtotal: Integer,
          ?shipping: Integer,
          ?total: Integer
        ) -> void

        def to_hash: -> { subtotal: Integer, shipping: Integer, total: Integer }
      end

      type item =
        {
          id: String,
          product_variant_id: String,
          quantity: Integer,
          subtotal: Integer
        }

      class Item < TerminalShop::Internal::Type::BaseModel
        attr_accessor id: String

        attr_accessor product_variant_id: String

        attr_accessor quantity: Integer

        attr_accessor subtotal: Integer

        def initialize: (
          id: String,
          product_variant_id: String,
          quantity: Integer,
          subtotal: Integer
        ) -> void

        def to_hash: -> {
          id: String,
          product_variant_id: String,
          quantity: Integer,
          subtotal: Integer
        }
      end

      type shipping = { service: String, timeframe: String }

      class Shipping < TerminalShop::Internal::Type::BaseModel
        attr_reader service: String?

        def service=: (String) -> String

        attr_reader timeframe: String?

        def timeframe=: (String) -> String

        def initialize: (?service: String, ?timeframe: String) -> void

        def to_hash: -> { service: String, timeframe: String }
      end
    end
  end
end
